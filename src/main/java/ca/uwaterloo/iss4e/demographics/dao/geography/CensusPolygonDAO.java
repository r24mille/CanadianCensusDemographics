package ca.uwaterloo.iss4e.demographics.dao.geography;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import ca.uwaterloo.iss4e.demographics.dao.geography.extractor.CensusPolygonExtractor;
import ca.uwaterloo.iss4e.demographics.model.geography.CensusPolygon;
import ca.uwaterloo.iss4e.demographics.util.CensusSchemaUtil;

public class CensusPolygonDAO {
	private DataSource dataSource;

	public CensusPolygonDAO(DataSource dataSouce) {
		this.dataSource = dataSouce;
	}

	public List<CensusPolygon> getCensusPolygonsForFK(Object fk) {
		String fkColumn = CensusSchemaUtil.getPkColumnName(fk);
		String schema = CensusSchemaUtil.getSchemaFromPk(fk);

		String sql = "select p.*, c.* from " + schema
				+ ".polygon_patch p left join " + schema + ".coordinate c "
				+ "on c.polygon_patch_id = p.polygon_patch_id where p."
				+ fkColumn
				+ " = ? order by p.polygon_patch_id, c.coordinate_id asc";

		JdbcTemplate template = new JdbcTemplate(dataSource);
		List<CensusPolygon> censusPolygons = template.query(sql,
				new Object[] { fk }, new CensusPolygonExtractor());
		return censusPolygons;
	}

	/**
	 * <p>
	 * The POLYGON_PATCH table is a simple joining table between
	 * DISSEMINATION_AREA or FORWARD_SORTATION_AREA to support a many to many
	 * relationship with COORDINATE.
	 * </p>
	 * 
	 * <p>
	 * This insert method is a bit different in that it only inserts the DA_ID
	 * or FSA_CODE and returns the POLYGON_PATCH_ID that was autogenerated by
	 * MySQL.
	 * </p>
	 */
	public int insertCensusPolygon(final Object fk) {
		String fkColumn = CensusSchemaUtil.getPkColumnName(fk);
		String schema = CensusSchemaUtil.getSchemaFromPk(fk);

		final String sql = "insert into " + schema + ".polygon_patch ("
				+ fkColumn + ") values (?)";

		JdbcTemplate template = new JdbcTemplate(dataSource);
		KeyHolder generatedKeyHolder = new GeneratedKeyHolder();
		template.update(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(
					Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(sql,
						Statement.RETURN_GENERATED_KEYS);
				if (fk instanceof String) {
					String fsaCode = (String) fk;
					ps.setString(1, fsaCode);
				} else if (fk instanceof Integer) {
					int daId = (Integer) fk;
					ps.setInt(1, daId);
				}
				return ps;
			}
		}, generatedKeyHolder);

		return generatedKeyHolder.getKey().intValue();
	}
}
